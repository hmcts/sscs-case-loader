#!groovy
properties([
  [$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/sscs-case-loader.git'],
  pipelineTriggers([[$class: 'GitHubPushTrigger']])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "sscs"
def component = "case-loader"


def secrets = [
  'sscs-${env}': [
    secret('sftp-host', 'GAPS2_SFTP_HOST'),
    secret('sftp-port', 'GAPS2_SFTP_PORT'),
    secret('gaps2-service-sftp-private-key', 'GAPS2_KEY_LOCATION'),
    secret('sftp-user', 'GAPS2_SFTP_USER'),
    secret('sftp-dir', 'GAPS2_SFTP_DIR'),
    secret('ccd-api', 'CORE_CASE_DATA_API_URL'),
    secret('ccd-jid', 'CORE_CASE_DATA_JURISDICTION_ID'),
    secret('ccd-tid', 'CORE_CASE_DATA_CASE_TYPE_ID'),
    secret('idam-api', 'IDAM_URL'),
    secret('idam-s2s-api', 'IDAM_S2S_AUTH'),
    secret('sscs-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),
    secret('s2s-micro', 'IDAM_S2S_AUTH_MICROSERVICE'),
    secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
    secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD'),
    secret('idam-sscs-oauth2-client-secret', 'IDAM_OAUTH2_CLIENT_SECRET'),
    secret('idam-oauth-user', 'IDAM_OAUTH2_CLIENT_ID'),
    secret('idam-redirect', 'IDAM_OAUTH2_REDIRECT_URL'),
  ]
]


static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline(type, product, component) {

  loadVaultSecrets(secrets)

  enableSlackNotifications('#sscs-tech')
  if ("demo"  != "${env.BRANCH_NAME}") {
    enableAksStagingDeployment()
    disableLegacyDeployment()
  }
  nonServiceApp()
  syncBranchesWithMaster(branchesToSync)

  before('akschartsinstall') {
    echo "Setting up data for functional tests"

    try {
      builder.gradle('functionalPreDeploy')
    } finally {
      junit '**/test-results/**/*.xml'
    }
  }

  afterSuccess('akschartsinstall') {
    echo "Checking case number:"
    sh "cat ccdCaseId.tmp"
    echo "Just waiting a while to ensure that the pod has run the job"
    sh "sleep 120s"
    echo "Verifying that functional test data was processed correctly"
    try {
      builder.gradle('functionalPostDeploy')
    } finally {
      junit '**/test-results/**/*.xml'
    }
  }

  afterSuccess('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }
}
